TEST CHANGE

Qt Creator
==========
Qt Creator is a cross-platform IDE for development with the Qt framework.

Supported Platforms
===================
The standalone binary packages support the following platforms:

Windows XP SP3 or later
(K)Ubuntu Linux 11.10 (32-bit and 64-bit) or later
Mac OS 10.6 or later

Building the sources requires Qt 5.2.0 or later.
It is also possible to build with Qt 4.8.x, but in that case the Welcome mode,
Qt Quick Designer, QML Profiler and WinRT support are disabled.

Compiling Qt Creator
====================
Prerequisites:
   * Qt 5.2.0 or later (with restrictions also Qt 4.8.x)
   * On Windows:
     -  ActiveState Active Perl
     -  MinGW or Visual Studio
     -  jom
   * On Mac: Xcode

The installed toolchains have to match the one Qt was compiled with.

You can build Qt Creator with

    cd $SOURCE_DIRECTORY
    qmake -r
    make (or mingw32-make or nmake or jom, depending on your platform)

Note: If you get "make: *** No targets specified and no makefile found. Stop."
      on Mac OS X, you need to additionally pass "-spec macx-g++" to qmake.

Installation ("make install") is not needed. It is however possible, using

    make install INSTALL_ROOT=$INSTALL_DIRECTORY

Private Header Dependencies
---------------------------

The Qt Quick Designer and the QNX plugin, and on Windows the Utils library,use
private headers of Qt. These private headers always end with an "_p.h". Digia
and the Qt Project do not promise to keep these files or APIs binary or source
compatible between releases. This means that when compiled, Qt Creator has a
dependency to the exact Qt version it was compiled with. Running Qt Creator
against updated Qt libraries (also for patch releases) might lead to link time
failures, or even crashes.

To disable the plugins, pass "QT_PRIVATE_HEADERS=" to qmake:

  qmake "QT_PRIVATE_HEADERS=" $SOURCE_DIRECTORY/qtcreator.pro

Compiling Qt and Qt Creator on Windows
--------------------------------------

This section provides step by step instructions for compiling the latest
versions of Qt and Qt Creator on Windows. Alternatively, to avoid having to
compile Qt yourself, you can use one of the versions of Qt shipped with the Qt
SDK (release builds of Qt using MinGW and Visual C++ 2010 or later).
For detailed information on the supported compilers, see
http://qt-project.org/wiki/Building_Qt_5_from_Git .

   1.  Decide which compiler to use: MinGW or Microsoft Visual Studio. If you
       plan to contribute to Qt Creator, you should compile your changes with
       both compilers.

   2.  Install msysGit from http://code.google.com/p/msysgit/. If you plan to
       use the MinGW compiler suite, do not choose to put git in the
       default path of Windows command prompts. For more information, see
       step 9.

   3.  Create a working directory under which to check out Qt and Qt Creator,
       for example, c:\work. If you plan to use MinGW and Microsoft Visual
       Studio simultaneously or mix different Qt versions, we recommend
       creating a directory structure which reflects that. For example:
       C:\work\qt5.2.1-vs10, C:\work\qt5.2.1-mingw.

   4.  Download and install Perl from http://www.activestate.com/activeperl
       and check that perl.exe is added to the path. Run perl -v to verify
       that the version displayed is 5.10 or later. Note that git ships
       an outdated version 5.8 which cannot be used for Qt.

   5.  In the working directory, check out the respective branch of Qt
       (we recommend the latest released version from the release branch,
       5.2.1; see https://qt.gitorious.org/qt).

   6.  Check out Qt Creator (master branch or latest version, see
       https://qt.gitorious.org/qt-creator).
       You should now have the directories qt and creator under your working
       directory.

   7.  Install a compiler:
       - For a MinGW toolchain for Qt, see http://qt-project.org/wiki/MinGW .

       - For Microsoft Visual C++, install the Windows SDK and the "Debugging
         Tools for Windows" from the SDK image. We strongly recommend using the
         64-bit version and 64-bit compilers on 64-bit systems.

         When using Visual C++ 2010, you must apply a hotfix that is available
         from http://support.microsoft.com/kb/2280741
         (See https://bugreports.qt-project.org/browse/QTBUG-11445).

         For the Visual C++ compilers, it is recommended to use the tool 'jom'.
         It is a replacement for nmake that utilizes all CPU cores and thus
         speeds up compilation significantly. Download it from
         http://download.qt-project.org/official_releases/jom
         and add the executable to the path.

   8.  For convenience, we recommend creating shell prompts with the correct
       environment. This can be done by creating a .bat-file
       (such as, <working_directory>\qtvars.bat) that contains the environment
       variable settings.
       A .bat-file for MinGW looks like:

         set PATH=<path_to_qt>\[qtbase\]bin;<path_to_mingw>\bin;<working_directory>\creator\bin;%PATH%
         set QMAKESPEC=win32-g++

       For the Visual C++ compilers, call the .bat file that sets up the
       environment for the compiler (provided by the Windows SDK or the
       compiler):

         CALL "C:\Program Files (x86)\MSVC10\VC\vcvarsall.bat" amd64
         set PATH=<path_to_qt>\[qtbase\]bin;<working_directory>\creator\bin;%PATH%
         set QMAKESPEC=win32-msvc2010

       You can create desktop links to the bat files using the working
       directory and specifying

       %SystemRoot%\system32\cmd.exe /E:ON /V:ON  /k <working_directory>\qtvars.bat

   9.  When using MinGW, open the shell prompt and enter:

       sh.exe

       That should result in a 'sh is not recognized as internal or external
       command...' error. If a sh.exe is found, the compile process will fail.
       You have to remove it from the path.

  10.  You are now ready to configure and build Qt and Qt Creator.
       Please see http://qt-project.org/wiki/Building_Qt_5_from_Git for
       recommended configure-options for Qt 5.
       To use MinGW, open the the shell prompt and enter:

         cd <path_to_qt>
         configure <configure_options> && mingw32-make -s
         cd ..\creator
         qmake && mingw32-make -s

       To use the Visual C++ compilers, enter:

         cd <path_to_qt>
         configure <configure_options> && jom
         cd ..\creator
         qmake && jom

   11. To launch Qt Creator, enter:
       qtcreator

   12. When using  Visual C++ with the "Debugging Tools for Windows" installed,
       the extension library qtcreatorcdbext.dll to be loaded into the
       Windows console debugger (cdb.exe) should have been built under
       lib\qtcreatorcdbext32 or lib\qtcreatorcdbext64.
       When using a 32 bit-build of Qt Creator with the 64 bit version of the
       "Debugging Tools for Windows" the library should also be built with
       a 64 bit compiler (rebuild src\libs\qtcreatorcdbext using a 64 bit
       compiler).

       If you are building 32 bit and running on a 64 bit
       Windows, you can obtain the 64 bit versions of the extension library
       and the binary win64interrupt.exe, which is required for
       debugging from the repository
       https://qt.gitorious.org/qt-creator/binary-artifacts/source/ .

   13. Qt Creator can be registered as a post-mortem debugger. This
       can be done in the options page or by running the tool qtcdebugger
       with administrative privileges passing the command line options
       -register/unregister, respectively. Alternatively,
       the required registry entries
       HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AeDebug and
       HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\AeDebug
       can be modified using the registry editor regedt32 to contain
       <path>\qt-creator\bin\qtcdebugger %ld %ld

       When using a self-built version of Qt Creator as post-mortem debugger, it needs to be
       able to find all dependent Qt-libraries and plugins when being launched by the
       system. The easiest way to provide them for Qt 5 is to run the tool windeployqt:

       windeployqt -svg -xml -designercomponents -script -concurrent -network -quick -test -sql -printsupport -qthelp -qmldir share\qtcreator -qmldir src\plugins\qmlprofiler bin\qtcreator.exe

Note that unlike on Unix, you cannot overwrite executables that are running.
Thus, if you want to work on Qt Creator using Qt Creator, you need a
separate build of it. We recommend using a separate, release-built version
of Qt and Qt Creator to work on a debug-built version of Qt and Qt Creator
or using shadow builds.

Building for Sailfish SDK
=========================

1. create set of directories like '~/QtCreator/Build' '~/QtCreator/Install'
2. navigate to '~/QtCreator' and clone the Qt Creator's source tree there
3. run qmake:
	qmake ../digia-qt-creator/qtcreator.pro -r -after "DEFINES+=IDE_COPY_SETTINGS_FROM_VARIANT=. IDE_SETTINGSVARIANT=SailfishAlpha4" QTC_PREFIX=

4. build QtCreator, intaller, artifacts etc as defined in
	http://qt-project.org/wiki/Building-Qt-Creator-Packages

Compiling Qt Creator for Sailfish SDK on OS X
---------------------------------------------

This section provides step by step instructions for compiling Qt and Qt Creator
for Sailfish SDK on OS X. The easiest way to build both Qt and Qt Creator is to
use the build scripts 'buildqt5.sh' and 'buildqtc.sh' from the Sailfish SDK
build tools repository (https://github.com/sailfish-sdk/sdk-build-tools).

By default the build scripts use Qt 5.2.1 but to build on OS X 10.10, Qt 5.4.0
or newer is required. The instructions below assume you're building on OS X
10.10. For other prerequisites, please see the README.md file at the root of
the Sailfish SDK build tools repository.

  1.   Create a working directory in which to extract Qt source code and
       checkout the required build tools and Qt Creator source repositories:

         mkdir ~/invariant

       Note that the script 'buildqt5.sh' expects to find Qt source code in a
       directory called 'invariant' under your home directory. For convenience,
       this same directory is used here for other required sources as well.

  2.   Download Qt 5.4.0 from http://download.qt.io/archive/qt/5.4/5.4.0/single/qt-everywhere-opensource-src-5.4.0.tar.gz
       and extract the archive into the directory created in step 1:

         tar -xf ~/Downloads/qt-everywhere-opensource-src-5.4.0.tar.gz -C ~/invariant

  3.   Clone the build tools and Qt Creator source repositories into the
       directory created in step 1:

         cd ~/invariant
         git clone https://github.com/sailfish-sdk/sdk-build-tools.git
         git clone https://github.com/sailfish-sdk/sailfish-qtcreator.git

       You should now have the following directory structure in your home
       directory:

         /
           Users/
             username/
               invariant/
                 qt-everywhere-opensource-src-5.4.0/
                 sailfish-qtcreator/
                 sdk-build-tools/


  4.   To build version 5.4.0 of Qt, the 'buildqt5.sh' script in
       'sdk-build-tools' needs to be modified. Find this line near the top of
       the file:

         QT_SOURCE_PACKAGE=qt-everywhere-opensource-src-5.2.1

       and change it to:

         QT_SOURCE_PACKAGE=qt-everywhere-opensource-src-5.4.0

  5.   Build a dynamic version of Qt by running the build script without any
       options:

         cd ~/invariant/sdk-build-tools
         ./buildqt5.sh

       Verify that the source directory shown matches the path where you extracted
       the Qt source package, e.g., '/Users/username/invariant/qt-everywhere-opensource-src-5.4.0'
       and answer "y" to the "Do you want continue?" prompt to start the build.

       Once the compilation finishes, the binaries can be found in a directory
       matching the source directory but with "-build" appended to the name:

         /
           Users/
             username/
               invariant/
                 qt-everywhere-opensource-src-5.4.0/
                 qt-everywhere-opensource-src-5.4.0-build/
                 ...

  6.   Build Qt Creator using the version of Qt built in step 5. To do this,
       you need to supply the full path of the Qt build directory to the
       'buildqtc.sh' script:

         ./buildqtc.sh --qtc-src ~/invariant/sailfish-qtcreator --qt-dir ~/invariant/qt-everywhere-opensource-src-5.4.0-build

       Verify that the Qt Creator source and Qt directories shown match the
       paths in steps 3 and 5, respectively. Answer "y" to the "Do you want
       continue?" prompt to start the build.

       When the compilation finishes, the final Qt Creator application bundle
       can be found in the 'qtc-build' directory in the directory where you
       started the build:

         /
           Users/
             username/
               invariant/
                 ...
                 sdk-build-tools/
                   qtc-build/
                     bin/
                       Qt Creator.app
                     ...

         No installation step is required, you can simply double click
         'Qt Creator.app' in the Finder to run it.

Third-party Components
======================
Qt Creator includes the following third-party components,
we thank the authors who made this possible:

* Open Source front-end for C++ (license MIT), enhanced for use in Qt Creator

  Roberto Raggi <roberto.raggi@gmail.com>

  QtCreator/src/shared/cplusplus

  Copyright 2005 Roberto Raggi <roberto@kdevelop.org>

  Permission to use, copy, modify, distribute, and sell this software and its
  documentation for any purpose is hereby granted without fee, provided that
  the above copyright notice appear in all copies and that both that
  copyright notice and this permission notice appear in supporting
  documentation.

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
  KDEVELOP TEAM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
  AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


* Botan, a C++ crypto library. Version 1.10.2

  Botan (http://botan.randombit.net/) is distributed under these terms::

  Copyright (C) 1999-2011 Jack Lloyd
                2001 Peter J Jones
                2004-2007 Justin Karneges
                2004 Vaclav Ovsik
                2005 Matthew Gregan
                2005-2006 Matt Johnston
                2006 Luca Piccarreta
                2007 Yves Jerschow
                2007-2008 FlexSecure GmbH
                2007-2008 Technische Universitat Darmstadt
                2007-2008 Falko Strenzke
                2007-2008 Martin Doering
                2007 Manuel Hartl
                2007 Christoph Ludwig
                2007 Patrick Sona
                2010 Olivier de Gaalon
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  1. Redistributions of source code must retain the above copyright
  notice, this list of conditions, and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions, and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) "AS IS" AND ANY EXPRESS OR
  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE,
  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR(S) OR CONTRIBUTOR(S) BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  The source code of Botan C++ crypto library can be found in
  QtCreator/src/libs/3rdparty


* ClassView and ImageViewer plugins

  Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).

  All rights reserved.
  Copyright (c) 2014 Denis Mingulov.

  Contact: http://www.qt-project.org/

  This file is part of Qt Creator.

  You may use this file under the terms of the BSD license as follows:

  "Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the
      distribution.
    * Neither the name of Digia Plc and its Subsidiary(-ies) nor
      the names of its contributors may be used to endorse or promote
      products derived from this software without specific prior written
      permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
