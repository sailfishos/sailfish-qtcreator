/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Creator documentation.
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
**
****************************************************************************/

/*!
    \page creating-plugins.html
    \title Creating Plugins

    At its very core, \QC consists of a plugin loader that loads and runs a set
    of plugins, which then actually provide the functionality that you know from
    \QC the IDE. So, even the main application window and menus are all provided
    by plugins. Plugins can use different means to provide other plugins access
    to their functionality and to allow them to extend certain aspects of the
    application.

    For example the \c Core plugin, which is the very basic plugin that must be
    present for \QC to run at all, provides the main window itself, and API
    for adding menu items, modes, editor types, navigation panels and many other
    things.

    The \c TextEditor plugin provides a framework and base implementation for
    different text editors with highlighting, completion and folding, that is
    then used by other plugins to add more specialized text editor types to \QC,
    like for editing C/C++ or \c {.pro} files.

    After reading this guide you will know what a basic plugin consists of,
    how to write a plugin specification file, what the lifecycle of a plugin is,
    what the general principles for extending existing plugins' functionality
    and providing interfaces for other plugins are, and will be able to write
    your first plugin.

    \section1 Basics

    \list
        \li \l{Getting and Building Qt Creator}
        \li \l{Creating Your First Plugin}
        \li \l{Plugin Meta Data}
        \li \l{Plugin Life Cycle}
    \endlist

    \section1 Design Principles

    \list
        \li \l{The Plugin Manager, the Object Pool, and Registered Objects}
        \li \l{The Action Manager and Commands}
    \omit
        \li \l{Aggregations}
        \li \l{Extending and Providing Interfaces}
    \endlist

    \section1 Creating 3rd-Party Plugins

    \list
        \li \l{A Note on Binary Compatibility}
        \li \l{Creating User-Installable Plugins}
    \endomit
    \endlist
*/
