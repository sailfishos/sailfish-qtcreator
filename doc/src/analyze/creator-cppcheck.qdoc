/****************************************************************************
**
** Copyright (C) 2018 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Creator documentation.
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
**
****************************************************************************/

/*!
    \contentspage index.html
    \previouspage creator-cpu-usage-analyzer.html
    \page creator-cppcheck.html
    \nextpage creator-autotest.html

    \title Analyzing Code with Cppcheck

    \l{http://cppcheck.sourceforge.net/}{Cppcheck} is a static analysis tool
    that detects errors in C++ code. Static analysis is performed on the source
    code without actually executing the application.

    The experimental Cppcheck Diagnostics plugin integrates diagnostics
    that are generated by the Cppcheck tool into the C++ editor.

    To enable running Cppcheck automatically on currently open files:

    \list 1
        \li Select \uicontrol Help > \uicontrol {About Plugins} >
            \uicontrol {Code Analyzer} > \uicontrol Cppcheck to enable the
            plugin.
        \li Restart \QC to load the plugin.
        \li Select \uicontrol Tools > \uicontrol Options > \uicontrol Analyzer
            > \uicontrol Cppcheck to specify settings for running Cppcheck.
            \image qtcreator-cppcheck-options.png "Cppcheck options"
        \li In the \uicontrol Binary field, enter the path to the Cppcheck
            executable file.
        \li In the \uicontrol Checks group, select the checks to perform on
            currently open files.
            \note By default, Cppcheck uses multiple threads to perform checks.
            Selecting the \uicontrol {Unused functions} option disables the
            default behavior.
        \li In the \uicontrol {Custom arguments} field, enter additional
            arguments for running Cppcheck. The arguments might be shadowed
            by automatically generated ones. To avoid possible conflicts in
            configuration, select the \uicontrol {Show raw output} check box
            to see the final arguments.
        \li In the \uicontrol {Ignored file patterns} field, enter a filter
            for ignoring files that match the pattern (wildcard). You can enter
            multiple patterns separated by commas. Even though Cppcheck is not
            run on files that match the provided patterns, they might be
            implicitly checked if other files include them.
        \li Select the \uicontrol {Inconclusive errors} check box to also
            mark possible false positives.
        \li Select the \uicontrol {Check all define combinations} check box to
            check all define combinations. Enabling this option can significantly
            slow down analysis, but might help to find more issues.
        \li Select the \uicontrol {Add include paths} check box to pass the
            current project's include paths to Cppcheck. Enabling this option
            slows down checks on big projects, but can help Cppcheck to find
            missing includes.
        \li Select the \uicontrol {Calculate additional arguments} check box to
            calculate additional arguments based on current project's settings
            (such as the language used and standard version) and pass them to
            Cppcheck.
    \endlist

    \QC automatically runs Cppcheck on currently opened documents and displays
    results via text marks or annotations.
*/
