/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Creator documentation.
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
**
****************************************************************************/

// **********************************************************************
// NOTE: the sections are not ordered by their logical order to avoid
// reshuffling the file each time the index order changes (i.e., often).
// Run the fixnavi.pl script to adjust the links to the index order.
// **********************************************************************

/*!

    \contentspage {Qt Creator Manual}
    \previouspage creator-visual-editor.html
    \page quick-projects.html
    \nextpage creator-quick-ui-forms.html

    \title Creating Qt Quick Projects

    \image qmldesigner-new-project.png "New File or Project dialog"

    When you create a new Qt Quick project from scratch, you have the following
    options:

    \list

        \li \uicontrol {Qt Quick Application} creates a Qt Quick 2 application
            project that can contain both QML and C++ code. The project includes
            a QQuickView. You can build the application and deploy it to desktop,
            embedded, and mobile target platforms.

        \li \uicontrol {Qt Quick Controls 2 Application} is like
            \uicontrol {Qt Quick Application}, but using
            \l{http://doc.qt.io/qt-5/qtquickcontrols2-index.html}
            {Qt Quick Controls 2} (requires Qt 5.7 or later).

        \li \uicontrol {Qt Canvas 3D Application} creates a Qt Quick application
            that imports the Qt Canvas 3D module and, optionally, includes
            \l{http://threejs.org}{three.js}.

        \li \uicontrol {Qt Quick UI Prototype} (in the \uicontrol {Other Project}
            category) creates a \l{Creating Qt Quick UI Projects}
            {Qt Quick UI project} with a single QML file that
            contains the main view. You can review Qt Quick 2 UI projects in the
            \l{Previewing QML Files}{QML Scene preview tool}. You do not need to
            build them, because they do not contain any C++ code.
            Use this only if you are prototyping. You cannot create a full application
            with this.

            Qt Quick UI projects cannot be deployed to embedded or mobile
            target platforms. For those platforms, create a Qt Quick application
            instead.

        \li \uicontrol {Qt Quick 2 Extension Plugin} (in the \uicontrol Library category)
            create C++ plugins that make it possible to offer extensions that
            can be loaded dynamically into Qt Quick 2 applications.

    \endlist

    \note The SDK for a particular target platform might install additional
    templates for that platform. For example, the QNX templates are installed
    as part of the QNX SDK.

    \QC creates the necessary boilerplate files. Some of the files are
    specific to a particular target platform.

    \section1 Creating Qt Quick Applications

    \list 1

        \li Select \uicontrol File > \uicontrol {New File or Project} >
            \uicontrol Application > \uicontrol {Qt Quick Application} >
            \uicontrol Choose.

        \li In the \uicontrol Name field, enter a name for the application.

        \li In the \uicontrol {Create in} field, enter the path for the project
            files, and then select \uicontrol Next (or \uicontrol Continue on
            \macos).

        \li In the \uicontrol {Build system} field, select the build system to
            use for building and running the project: \l qmake,
            \l {Setting Up CMake}{CMake}, or \l {Setting Up Qbs}{Qbs}.

        \li Select \uicontrol Next.

        \li Select the Qt version to
            develop with in the \uicontrol {Minimal required Qt version} field.
            The Qt version determines the Qt Quick imports that are used in the
            QML files.

        \li Select the
            \uicontrol {With .ui.qml file} check box to create an UI
            form that can contain a subset of the QML language. Similarly as
            with the UI forms for \QD, it is recommended that you use \QMLD to
            edit the UI forms. For more information, see \l{Qt Quick UI Forms}.

        \li Select \uicontrol Next.

        \li Select \l{glossary-buildandrun-kit}{kits} for running and building
            your project, and then click \uicontrol Next.

            \note Kits are listed if they have been specified in
            \uicontrol Tools > \uicontrol Options > \uicontrol {Build & Run} >
            \uicontrol Kits.

        \li Review the project settings, and click \uicontrol Finish (on Windows
            and Linux) or \uicontrol Done (on \macos) to create the project.

    \endlist

    \QC generates a UI file, \e Page1Form.ui.qml, that you can modify in the
    \QMLD \uicontrol {Form Editor} and two QML files, \e Page1.qml and
    \e main.qml, that you can modify in the \uicontrol {Text Editor} to add the
    application logic. The \e .ui.qml file is created if you selected the
    \uicontrol {With .ui.qml file} check box.

    \include creator-tutorial-create-qq-project.qdocinc qt quick application

    \section1 Creating Qt Quick UI Projects

    Qt Quick UI projects are useful for testing or prototyping user interfaces,
    or for setting up a separate project just for QML editing, for example. You
    cannot use them for application development, because they do not contain:

    \list
        \li C++ code
        \li Resource files (.qrc)
        \li Code needed for deploying applications to \l{glossary-device}
            {devices}
    \endlist

    To create a Qt Quick UI project:

    \list 1

        \li Select \uicontrol File > \uicontrol {New File or Project} >
            \uicontrol {Other Project} > \uicontrol {Qt Quick UI} >
            \uicontrol Choose.

        \li In the \uicontrol {Minimal required Qt version} field, select the Qt
            version to develop with. The Qt version determines the Qt Quick
            imports that are used in the QML files.

            You can add imports later to combine Qt Quick basic types with
            Qt Quick Controls, Qt Quick Dialogs, and Qt Quick Layouts (available
            since Qt 5.1).

        \li Select the \uicontrol {With .ui.qml file} check box to create an UI
            form.

        \li Select \uicontrol Next (or \uicontrol Continue on \macos).

        \li Review the project settings, and click \uicontrol Finish (on Windows
            and Linux) or \uicontrol Done (on \macos) to create the project.

    \endlist

    \QC creates the following files:

    \list

        \li .qmlproject project file defines that all QML, JavaScript, and image
            files in the project folder belong to the project. Therefore, you do
            not need to individually list all the files in the project.

        \li .qml file defines an UI item, such as a component, screen, or the
            whole application UI.

        \li ui.qml file defines a form for the application UI. This file is
            created if you selected the \uicontrol {With .ui.qml file} check
            box.

    \endlist

    To use JavaScript and image files in the application, copy them to the
    project folder.

*/
