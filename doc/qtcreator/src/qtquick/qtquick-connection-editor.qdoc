/****************************************************************************
**
** Copyright (C) 2021 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Creator documentation.
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
**
****************************************************************************/

/*!
    \previouspage qtquick-editing-easing-curves.html
    \page qmldesigner-connections.html
    \nextpage quick-signals.html

    \title Adding Connections

    \list
        \li \l{Connecting Components to Signals}

            A signal and handler mechanism enables components to respond to
            application events, which are represented by \e signals. When a
            signal is emitted, the corresponding \e {signal handler} is
            invoked to respond to the event by applying an action, for
            example.

        \li \l{Adding Bindings Between Properties}

            A component's property can be assigned a static value that stays
            constant until it is explicitly changed. To make the UI more
            dynamic, you can use \e {property bindings}. This means that you
            can specify relationships between component properties so that when
            the value of a property changes, the values of any properties that
            are bound to it are automatically updated accordingly.

        \li \l{Specifying Dynamic Properties}

            Each preset component has a set of preset properties that you
            can specify values for. You can add custom properties that would
            not otherwise exist for a particular \l{Component Types}
            {component type} or your custom components.

        \if defined(qtcreator)
        \li \l{Managing C++ Backend Objects}

            Application developers can access QObject objects implemented in C++
            from QML files.
        \endif
    \endlist

    For an example of using properties, bindings, and connections to create a
    scalable push button, see \l{Creating Scalable Buttons and Borders}.
*/
