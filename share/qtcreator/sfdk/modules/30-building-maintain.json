{
    "version": 3,
    "domain": "building",
    "trBrief": "Building software",

    "trDescription": "THE SDK BUILD ENGINE\n\nThe native platform for %{OsVariant} software development is GNU/Linux (Linux). In order to enable development on macOS and Windows as well as to support miscellaneous Linux variants more easily, the %{SdkVariant} encapsulates its back-end in a virtual machine running a specifically tailored Linux distribution, the so called SDK Build Engine.\n\nCompilers and other tools running inside the build engine access the host file system through shared directories. By default the user home directory is shared for this purpose. In addition to that an alternative directory may be selected during SDK installation and through the Options dialog of the %{IdeVariant} (QtÂ Creator).\n\nSometimes the paths from inside the build engine leak in sfdk output. Understanding to the fact that certain paths exist inside the build engine and possibly map to certain paths on the host filesystem may help debugging issues with advanced or non standard use of the SDK. These are the paths commonly seen:\n\n- /home/mersdk/share\n    This is where the user home directory shared from the host file system maps to\n- /home/src1\n    This is where the alternative source directory shared from the host file system maps to\n- /home/deploy\n    Files under this directory are physically stored inside the virtual machine. This location is used by 'rpmbuild' as the %buildroot, for which purpose a \"fully capable\" file system is needed.\n\nWhen the global '--debug' option is used, reverse path mapping in sfdk output is disabled.\n\nThe build engine can be conveniently controlled with the 'engine' command. The virtual machine will start automatically when needed but be aware that it continues running on background until explicitly stopped.\n\n\nMANAGING SDK BUILD TOOLS\n\nThe %{SdkVariant} abstracts the support for cross-development for particular target HW architectures and %{OsVariant} versions (forward compatibility applies) in form of add-on SDK Build Tools.\n\nTwo types of SDK Build Tools are recognized:\n\n1. SDK Build Target - a target-compatible %{OsVariant} image, and\n2. SDK Build Tooling - a host-compatible collection of build time dependencies.\n\nThe shorter terms \"build tools\", \"(build) tooling(s)\" and \"(build) target(s)\" are used instead of the official terms where the context admits. Also, since a single SDK Build Tooling is usually used with multiple SDK Build Targets that enable development for the same %{OsVariant} version and differ only by the supported target architecture, the term SDK Build Tools is sometimes used to denote a particular combination of SDK Build Target and Tooling, uniquely identified by the SDK Build Target name.\n\nSDK Build Tools can be managed using the 'tools' command or with the help of the interactive SDK Installer/Maintenance Tool (see the 'maintain' command).",

    "worker":
    {
        "type": "builtin",
        "version": 1
    },

    "commands":
    [
        {
            "name": "engine",
            "trSynopsis": "{start|stop|status}\nset <property>=<value>...\nshow\nexec [<command> [<arg>...]]",
            "trBrief": "Maintain and control the build engine",
            "dynamicSubcommands": ["exec"],
            "trDescription": "The 'start' and 'stop' commands allow to control the build engine virtual machine conveniently. Starting the build engine explicitly is usually not required - commands that need build engine running will ensure it is running. The 'status' command prints status information.\n\nBuild engine properties can be set with the 'set' command and queried with the 'show' command. Known properties are described further below.\n\nThe 'exec' command allows executing an arbitrary <command> inside the build engine. If no <command> is specified, an interactive shell is executed.\n\n\nBuild engine properties:\n\nhost-name <name>\n    Host name of the build host is recorded in metadata of the build results. The <name> should be a conformant host name, though not necessarily resolvable or globally unique one. Defaults to the host name of the host where sfdk is running.\n\n    Setting an empty <name> has the effect of taking the default value into use. (Subsequent 'show' will not report an empty value, the effective value is always reported.) The default value may vary between sfdk executions e.g. in dependence of active network connections. It is adviceable to avoid unwanted changes by setting this property explicitly where this applies.\n\nvm.cpu-count <number>\n    The number of virtual CPUs inside the build engine virtual machine. The maximum is limited by the number of CPUs available on the host.\n\nvm.memory-size <megabytes>\n    The amount of memory (RAM) available to the build engine virtual machine. The maximum is limited by the size of the physical memory available on the host.\n\nvm.storage-size <megabytes>\n    The amount of storage (disk) space available to the build engine virtual machine. Storage size can only grow; shrinking is not possible.\n\nvm.swap-size <megabytes>\n    The size of swap. Setting to zero disables swap (default). Swap may consume the free storage size inside the virtual machine. If the requested size cannot be served, the highest possible size will be set instead."
        },
        {
            "name": "tools",
            "trSynopsis": "[tooling|target] list [-a|--available] [--slow]\n[tooling|target] update <name>\n[tooling|target] register [--user <user> [--password <password>]] {--all|<name>}\n[tooling|target] install <name>\n[tooling|target] install-custom <name> {<URL>|<file>} [--tooling <tooling>]\n[tooling|target] remove <name>\n[tooling|target] package-list <name> [<pattern>...]\n[tooling|target] package-install <name> <package>...\n[tooling|target] package-remove <name> <package>...\n[tooling|target] exec <name> [<command> [<arg>...]]",
            "trBrief": "Maintain build tools",
            "dynamicSubcommands": ["exec"],
            "trDescription": "The 'list' command lists the installed build tools. If the '--available' option is used, build tools available for installation from SDK repositories are listed, including those already installed. To see the combined listing of targets grouped by the toolings they use, use the 'list' command without the leading 'tooling' or 'target' keyword. The status flags that may appear in the second column of 'list' output are described further below.\n\nBy default the 'list' command caches or omits information that would be slow to retrieve. Use the '--slow' option to check the state more thoroughly.\n\nBuild targets available from SDK repositories may be installed using the 'install' command. Required build tooling will be installed automatically. Build toolings available from SDK repositories cannot be installed explicitly without installing a build target requiring the build tooling.\n\nCustom build tools may be installed from a supplied image using the 'install-custom' command. The 'install-custom' command installs either a new build tooling or target, based on the detected type of the image specified with its <URL> or <file> name. If the auto detection fails, it is possible to specify the type of the image manually by prepending one of the 'tooling' or 'target' keywords. In case of a new target, an appropriate tooling will be selected automatically unless overridden with '--tooling'.\n\nBuild tools previously installed either way can be removed using the 'remove' command. The same applies to build target snapshots.\n\nThe 'update' command updates the given tooling or target. When updating a target, the tooling used by the target will be updated automatically prior to updating the target itself.\n\nThe 'register' command enables installing/updating packages from repositories with restricted access. It can operate on a single named or all targets and/or toolings. User name and/or password will be queried interactively if not specified on command line.\n\nBasic management of the packages installed under toolings and targets is possible with the help of the commands 'package-list', 'package-install' and 'package-remove'. The first argument, common to all of these commands, is the tooling or target <name>. The 'package-list' command outputs all packages by default; it may be passed one or more <pattern>s in order to limit the listing to packages whose name match any of the given patterns. Patterns may use '*' and '?' wildcards and when a pattern is enclosed in '/', it is interpreted as a regular expression.\n\nArbitrary maintenance commands may be executed under toolings and targets with the 'exec' command. The first argument is the tooling or target <name>. If <command> is omitted, an interactive shell will be opened.\n\n\nStatus flags:\n\navailable\n    Build tools available from SDK repositories, available for installation using the 'install' command.\n\ninstalled\n    Build tools available from SDK repositories, currently installed.\n\nsdk-provided\n    Synonym for 'installed'. Used in views where 'user-defined' may appear.\n\nuser-defined\n    Custom build tools installed using the 'install-custom' command\n\nsnapshot\n    Build target which is a snapshot. Snapshots are taken automatically when the 'snapshot' configuration option is in use.\n\noutdated\n    This flag may only appear together with the 'snapshot' flag and only when the '--slow' option is used. Its presence meants the original target was updated or otherwise changed since the snapshot was taken or updated last time.\n\nlatest\n    Build tools available from SDK repositories under the symbolic (floating) version 'latest'; subject to automatic upgrade between SDK releases.\n\nearly-access\n    Build tools available from SDK repositories under the symbolic (floating) version 'early-access'; subject to automatic upgrade between SDK releases."
        }
    ],

    "options":
    [
    ]
}
