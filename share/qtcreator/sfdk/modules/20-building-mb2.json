{
    "version": 4,
    "domain": "building",
    "trBrief": "Building software",

    "trDescription": "INTRODUCTION\n\nStart by choosing the build target. List the available build tools.\n\n$ sfdk tools list\n%{OsVariant:NoSpace}-3.0.0.8\n└─%{OsVariant:NoSpace}-3.0.0.8-i486\n%{OsVariant:NoSpace}-3.0.2.8\n├─%{OsVariant:NoSpace}-3.0.2.8-armv7hl\n└─%{OsVariant:NoSpace}-3.0.2.8-i486\n\nEach build target lets you build software for a specific operating system version running on a specific hardware. Each target is listed under one tooling supporting the given OS version (see MANAGING SDK BUILD TOOLS below for more information).\n\nAs with other configuration options, you can decide if you want to apply your choice globally (with the '--global' option) or just for the current (shell) session. Let's exercise both options. Pick the latest ARM target for global use and its i486 counterpart for this session only.\n\n$ sfdk config --global --push target %{OsVariant:NoSpace}-3.0.2.8-armv7hl\n$ sfdk config --push target %{OsVariant:NoSpace}-3.0.2.8-i486\n\nNow review what we have configured.\n\n$ sfdk config\n# ---- command scope ---------\n# <clear>\n\n# ---- session scope ---------\ntarget = %{OsVariant:NoSpace}-3.0.2.8-i486\n\n# ---- global scope ---------\n# masked at session scope\n;target = %{OsVariant:NoSpace}-3.0.2.8-armv7hl\n\nOptions pushed higher on the stack override (mask) those appearing lower - as stated conveniently in the output.\n\nEnter a project directory and perform an all-in-one build procedure using the 'build' command. If you don't have an existing project available, you can create one as in the following example.\n\n$ mkdir my-app && cd my-app\n$ sfdk init --type qtquick2app\n$ sfdk build\n\nAfter successful build the resulting RPM package(s) can be found under the RPMS directory.\n\n$ ls ./RPMS\nmy-app-0-1.i486.rpm\n\nIt is possible to invoke each build phase separately.\n\n$ sfdk qmake\n$ sfdk make\n$ sfdk make-install\n$ sfdk package\n\nAfter all pick a device from those configured inside the %{IdeVariant} (Qt Creator) and deploy the package.\n\n$ sfdk device list\n#0 \"%{OsVariant} Emulator 3.1.0.12\"\n    emulator         autodetected  nemo@127.0.0.1:2223\n    private-key: ~/%{OsVariant:NoSpace}/vmshare/ssh...%{OsVariant:Underline}-Emulator-latest/nemo\n#1 \"Xperia 10 - Dual SIM (ARM)\"\n    hardware-device  user-defined  nemo@192.168.2.15:22\n    private-key: ~/%{OsVariant:NoSpace}/vmshare/ssh...Xperia_10_-_Dual_SIM_(ARM)/nemo\n$ sfdk config --push device \"%{OsVariant} Emulator 3.1.0.12\"\n$ sfdk deploy --sdk\n\n\nSHADOW BUILDS\n\nShadow builds can be initiated simply by passing project file or directory path to the 'build' or 'qmake' (or 'cmake') command:\n\n$ mkdir build && cd build\n$ sfdk build ../path/to/sources\n\nOr manually invoking each step:\n\n$ mkdir build && cd build\n$ sfdk qmake ../path/to/sources\n$ sfdk make\n$ sfdk rpm\n\nLimitations related to shadow builds:\n\n1. Shadow build is only available for packages that use qmake (or CMake or GNU Automake).  Additionally, their build and install procedure must be fully realized using qmake (or CMake or GNU Automake) with no additional steps implemented at .spec level.\n2. The \"--doprep\" option to the \"build\" command cannot be used with shadow builds.\n3. If \"prep\" or \"apply\" is needed, it must be used directly on the source tree prior to starting a shadow build (shadow builds for multiple targets are still possible provided that the %prep section is target-independent).\n4. GNU Automake, Autoconf and related tools, in case of packages that invoke these at build time, still store their outputs (Makefile.in, configure, etc.) under the source tree.\n\n\nSHARED OUTPUT DIRECTORY\n\nWith shared output directory, it is possible to deploy all required packages built from different sources more conveniently. This can be achieved with the 'output-dir' configuration option or even better with the combination of 'output-prefix' and 'task' options.  Consider enabling 'output-prefix' and 'task' by default to get build results grouped by the tasks they are related to.  By default, the task will be determined based on the current Git branch - check the description of the 'task' option for more details:\n\n$ sfdk config --global --push output-prefix ~/RPMS\n$ sfdk config --global --push task\n\n$ sfdk config --push target my-target\n$ cd packageA\n$ git checkout -b bug12345\n$ sfdk build\n$ cd ../packageB\n$ git checkout -b bug12345\n$ sfdk build\n\n$ ls -1 ~/RPMS/bug12345/my-target/\n$ sfdk deploy --sdk --all\n\nWith these options the output directory is also searched for build-time dependencies by default, so if packageB requires packageA at build time, you do not need to install packageA manually to the build target.\n\n\nDEPLOYING PLATFORM PACKAGES\n\nWith platform packages, subpackages specific to a particular device variant often exist, so a careful selection of subpackages to install is needed. Platform packages can be udated conveniently with the help of 'zypper dup', which avoids the need for manual selection in many cases:\n\n$ sfdk deploy --manual --all \\\n    && sfdk device exec sudo zypper -p RPMS dup --from ~plus-repo-1\n\nA shorthand syntax exists for this approach – it is the '--zypper-dup' deployment method:\n\n$ sfdk deploy --zypper-dup --all\n\nPass '--dry-run' to preview the effect before actually applying it.\n \n \nCLEAN BUILDS\n\nBuild time requirements of one package may interfere with those of another one. In order to avoid polluting build targets with dependencies of a particular package, sfdk uses build targets through writable snapshots. See the description of the 'snapshot' configuration option for details on how a snapshot is chosen.\n\nIt is possible to return to the clean state where just the current build-time dependencies are pulled in with the 'build-requires reset' command.  Compared to the 'build-requires pull' command, this starts with a freshly re-created snapshot.\n\nThe 'build-requires reset' command is implied whenever the original build target is updated, so if a locally built package is needed as a build-time dependency, you should not install it manually under the snapshot. Instead, rely on the above mentioned fact that a shared output directory can be used to supply build-time dependencies, and get locally built dependencies installed automatically that way.\n\nFor similar reasons, when sfdk fails to install build-time dependencies due to errors like \"file not found on the server\", i.e., because the local repository cache got outdated, it is the original target that should be updated, not the snapshot.\n\nExisting snapshots can be listed and removed using the 'tools' command just like the ordinary targets.\n\n\nSIGNING PACKAGES\n\nThe 'build' and 'package' commands allow to optionally sign the resulting packages. Use the '--sign' option to these commands to enable this step.\n\nThe cryptographic key to use for signing can be selected with the configuration option 'package.signing-user'. If this is a passphrase-protected key, the passphrase needs to be supplied with either the 'package.signing-passphrase' or 'package.signing-passphrase-file' option:\n\n$ touch ~/path/to/passphrase-file\n$ chmod 600 ~/path/to/passphrase-file\n$ cat >~/path/to/passphrase-file\nYourPassphrase\n^D\n$ sfdk config --global --push package.signing-user NAME\n$ sfdk config --global --push package.signing-passphrase-file \\\n    ~/path/to/passphrase-file\n# sfdk build --sign\n\n\nMAINTAINING CHANGELOGS\n\nIf a file exists with '.changes' extension, otherwise matching the spec file name, the effect will be the same as having a %changelog section in the spec file. If a file with '.changes.run' extension is found instead, this file will be executed and its output treated as the actual change log.",

    "worker":
    {
        "type": "engine-command",
        "version": 4,
        "program": "mb2"
    },

    "commands":
    [
        {
            "name": "build-requires",
            "trSynopsis": "[--[no-]refresh] {pull|reset}",
            "trBrief": "Update build time dependencies",
            "configOptions": ["*", "target!", "-no-pull-build-requires"],
            "hooks": ["[pre-|post-]pull-build-requires"],
            "trDescription": "When 'pull' is used, install or update the build-time dependencies as is done implicitly by the 'prepare', 'build' and 'qmake' (or 'cmake') commands but refresh the package cache first, unless '--no-refresh' is active.\n\nUnless the 'no-snapshot' configuration option is used, '--no-refresh' is implied. This can be overridden with '--refresh' - do not use unless you know what you are doing. If refresh is needed, refresh (and update) the original target instead, then do 'reset'.\n\nThe 'reset' command is an extended version that also ensures that nothing else than the current build-time dependencies is pulled in on top of the clean build environment. It does it by resetting the target snapshot to the (possibly updated) state of the original target first, pulling later. (Not available when the 'no-snapshot' configuration option is used.)"
        },
        {
            "name": "prepare",
            "trBrief": "Prepare sources using the recipe from spec file",
            "configOptions": ["*", "target!"],
            "trDescription": "Run rpmbuild. Execute just the %prep section of the .spec file."
        },
        {
            "name": "apply",
            "trSynopsis": "[-R]",
            "trBrief": "Apply patches listed in the spec file",
            "configOptions": ["*", "target!"],
            "trDescription": "Apply all patches defined in the .spec file to the source tree.\n\n-R    reverse apply patches (patch -R)"
        },
        {
            "name": "build",
            "trSynopsis": "[-p|--prepare] [--no-check] [-d|--enable-debug] [-j <n>] [--sign] [<project-dir-or-file>] [--] [<rpmbuild-extra-arg>...]",
            "trBrief": "Execute all build steps at once",
            "configOptions": ["*", "target!"],
            "hooks": ["[pre-|post-]pull-build-requires", "post-package", "pre-sign"],
            "trDescription": "Run rpmbuild. Execute all sections of the .spec file except for %prep unless told otherwise.\n\nIf path to a <project-dir-or-file> is passed, shadow build will be done. Otherwise the current working directory is treated as the project directory. (The file name part is ignored - project file selection is done by qmake call inside the .spec file.)\n\n--prepare         Run %prep section as well\n--no-check        Skip the %check section\n--enable-debug    Enable debug build\n-j <n>            Run up to <n> jobs simultaneously\n--sign            Sign packages",
            "preRun": "module.maybeImportSigningKey"
        },
        {
            "name": "qmake",
            "trSynopsis": "[<project-dir-or-file>] [--] [<qmake-extra-arg>...]",
            "trBrief": "Execute qmake build step",
            "configOptions": ["*", "target!"],
            "hooks": ["[pre-|post-]pull-build-requires"],
            "trDescription": "Run rpmbuild. Execute just the %build section of the .spec file, suppressing any 'make' invocation figuring in that section.\n\nIf path to a <project-dir-or-file> is passed, shadow build will be done. Otherwise the current working directory is treated as the project directory. (The file name part is ignored - project file selection is done by qmake call inside the .spec file.)"
        },
        {
            "name": "cmake",
            "trSynopsis": "[<project-dir>] [--] [<cmake-extra-arg>...]\n--build . [<cmake-extra-arg>...] [-- <build-tool-extra-arg>...]",
            "trBrief": "Execute cmake build step",
            "configOptions": ["*", "target!"],
            "hooks": ["[pre-|post-]pull-build-requires"],
            "trDescription": "Run rpmbuild. Execute just the %build section of the .spec file, suppressing any 'cmake' invocation figuring in that section, that does not match the execution form used here, i.e., does not trigger the desired action, namely 1) generate a project buildsystem or 2) build the project.\n\nAdditionally, any plain 'make' invocation will be recognized as implementing the \"build the project\" action and will be treated accordingly. Any possible <cmake-extra-arg> will be silently ignored and any possible <build-tools-extra-arg> will be used equally for each 'make' invocation in that case.\n\nIf path to a <project-dir> is passed, shadow build will be done. Otherwise the current working directory is treated as the project directory.",
            "commandLineFilter": "module.filterCMakeCommandLine"
        },
        {
            "name": "make",
            "trSynopsis": "[<make-extra-arg>...]",
            "trBrief": "Execute make build step",
            "configOptions": ["*", "target!"],
            "trDescription": "Run rpmbuild. Execute just the %build section of the .spec file, suppressing any command figuring in that section, that is recognized as a command to generate project buildsystem. The following is a complete list of such commands:\n\n- any 'qmake' invocation\n- any 'cmake' invocation using the corresponding execution form\n\nFor CMake based projects the 'make <make-extra-arg>...' command is equivalent to 'cmake --build . -- <make-extra-arg>...' (provided that 'make' is the build tool used by the project)."
        },
        {
            "name": "make-install",
            "trBrief": "Execute make-install build step",
            "configOptions": ["*", "target!"],
            "trDescription": "Run rpmbuild. Execute just the %install section of the .spec file in order to populate the RPM \"buildroot\". This is not the same as using the 'make' command with 'install' as an argument."
        },
        {
            "name": "package",
            "trSynopsis": "[--no-check] [--sign]",
            "trBrief": "Execute package creation build step",
            "configOptions": ["*", "target!"],
            "hooks": ["post-package", "pre-sign"],
            "trDescription": "Run rpmbuild. Execute just the %install section of the .spec file, then build binary packages and optionally sign those. Unless '--no-check' is passed, execute also the %check section if present.",
            "preRun": "module.maybeImportSigningKey"
        }
    ],

    "options":
    [
        {
            "name": "specfile",
            "trArgument": "<file>",
            "trDescription": "Select the .spec file. Normally the .spec file is looked for inside the 'rpm' subdirectory of the package root directory. Some packages may provide more than one .spec file in their 'rpm' directory, it which case is necessary to select one using this option.",
            "alias": "specfile",
            "validator": "module.validateSpecFilePath"
        },
        {
            "name": "target",
            "trArgument": "<name>",
            "trDescription": "Select the sb2 target to use",
            "validator": "module.validateBuildTargetName"
        },
        {
            "name": "output-dir",
            "trArgument": "<dir>",
            "trDescription": "Defaults to './RPMS'. The resulting RPM packages will be placed  directly under the specified <dir>. With this option existing files in  the output directory are preserved. Implies 'search-output-dir'",
            "validator": "module.validateExistingDirectory"
        },
        {
            "name": "output-prefix",
            "trArgument": "<dir>",
            "trDescription": "Much like 'output-dir' except that a subdirectory of the given <dir> will be used, denoted by the build target name (see 'target'). When the '--task' option is active, output directories will be further grouped by task name ('<dir>/[<task>/]<target>').",
            "validator": "module.validateExistingDirectory"
        },
        {
            "name": "search-output-dir",
            "trArgument": "[verbose|quiet]",
            "trDescription": "Consider the RPM packages found in the output directory when installing build time dependencies. The optional value controls zypper verbosity.  The default is 'verbose'.\n\nBy default the already installed packages from output directory are upgraded using 'zypper dup' before installing build time dependencies. This can be disabled with 'no-zypper-dup'",
            "validator": "module.validateSearchOutputDirOption"
        },
        {
            "name": "no-search-output-dir",
            "trDescription": "Override 'search-output-dir' option"
        },
        {
            "name": "no-zypper-dup",
            "trDescription": "Disable upgrading installed packages before installing build time dependencies. Only effective with 'search-output-dir'"
        },
        {
            "name": "snapshot",
            "trArgument": "[<suffix>]",
            "trDescription": "Use a particular snapshot of the build target. The snapshot name is determined by combining the original target name with the given <suffix>, separated with dot.\n\nBy default, i.e., when this option is not set, the snapshot with suffix 'default' is used.\n\nWhen this option is set but no <suffix> was specified, '%pool' is assumed for compatibility with older sfdk versions. (Deprecated)\n\nWhen <suffix> is '%pool[,<N>]', a temporary snapshot will be used from a pool of the optionally given size <N> (default: 5).  The actual suffix will follow the pattern 'pool.XXX'.\n\nSnapshot state is preserved across sfdk invocations unless the original target was updated meanwhile or it is a temporary snapshot that was previously used with different build tree, in which cases the snapshot will be reset. Snapshot can be reset forcefully using the 'build-requires reset' command."
        },
        {
            "name": "no-snapshot",
            "trArgument": "[force]",
            "trDescription": "Use build targets directly. sfdk will refuse to directly use a target for which snapshots exist unless 'force' is passed as the optional argument."
        },
        {
            "name": "task",
            "trArgument": "[<name>|git:<regex>]",
            "trDescription": "Modifies behavior of 'output-prefix' and 'snapshot' options.  The task name can be specified either directly as <name> or it can be derived from the current Git branch name, if a value in the form 'git:<regex>' is set. The POSIX extended regular expression <regex> serves both as a condition to enable this option and as a mean to select a substring of the branch name to be used as the task name. Defaults to 'git:^[[:alpha:]]{2,5}[[:digit:]]{3,}'. The default expression is suitable to look for a leading bug reference in the branch name. E.g. 'bug1234' in 'bug1234-quickfix'."
        },
        {
            "name": "no-task",
            "trDescription": "Override 'task' option"
        },
        {
            "name": "fix-version",
            "trArgument": "[<tag>]",
            "trDescription": "This option is implied when used inside a Git working tree (use 'no-fix-version' to override).\n\nWith this option the version recorded in the .spec file will be ignored. Instead, package version will be derived from the name of the latest tag in the current git branch or the selected tag <tag> (the latter case is hardly useful on other than 'command' scope).\n\nIf the current HEAD, index or working tree differs from the tree denoted by the (latest or selected) tag, a suffix composed from the current branch name, time stamp and a commit SHA1 will be added to the package version. If git-state is not clean a git-stash will be created and its SHA1 will be used.\n\nIt is recommended to store 'Version: 0' and 'Release: 1' in the .spec file when this option is to be used; as a sign that the version recorded there is not relevant."
        },
        {
            "name": "no-fix-version",
            "trDescription": "Override 'fix-version' option"
        },
        {
            "name": "no-pull-build-requires",
            "trDescription": "Do not update build-time dependencies unless required explicitly with 'build-requires pull'."
        },
        {
            "name": "package.signing-user",
            "trArgument": "<name>",
            "trDescription": "Select the GnuPG key to sign packages with. Accepts the same values as the '--local-user' option of the 'gpg' command does. See GnuPG documentation for more details.\n\nDepending on your SDK variant, different semantics may apply."
        },
        {
            "name": "package.signing-passphrase",
            "trArgument": "<passphrase>",
            "trDescription": "In case a passphrase-protected signing key is selected for signing packages, use <string> as the passphrase."
        },
        {
            "name": "package.signing-passphrase-file",
            "trArgument": "<file>",
            "trDescription": "In case a passphrase-protected signing key is selected for signing packages, read the passphrase from the <file>. Only the first line will be read. The file needs to be stored under the %{SdkVariant} workspace."
        }
    ],

    "hooks":
    [
        {
            "name": "pre-pull-build-requires",
            "trSynopsis": "[<dependency>...]",
            "trDescription": "This hook is invoked by commands that take care of updating build time dependencies – prior to doing so.\n\nThe arguments and available environment variables are the same as with the 'pull-build-requires' hook."
        },
        {
            "name": "pull-build-requires",
            "trSynopsis": "[<dependency>...]",
            "trDescription": "This hook is invoked by commands that take care of updating build time dependencies. This hook fully overrides the default procedure of updating build time dependencies.\n\nAny <dependency> determined by querying the RPM spec file will be passed as an argument to this hook.\n\nThe following environment variables provide additional information to this hook:\n\nSFDK_OUTPUT_DIR\n    The effective output directory, possibly influenced by the 'output-dir' or 'output-prefix' configuration options.\n\nSFDK_OUTPUT_DIR_FILTERED\n    Only set when the 'search-output-dir' configuration option is active.  This points to a copy of the output directory with the RPM binaries built from the current project excluded.\n\nSFDK_TARGET\n    The active build target. Unless the 'no-snapshot' configuration option is used, this is the snapshot target name and the original build target name is available as 'SFDK_TARGET_ORIGINAL'.\n\nSFDK_TARGET_ORIGINAL\n    See 'SFDK_TARGET'.\n\nSFDK_SPEC_FILE\n    The .spec file used for this build."
        },
        {
            "name": "post-pull-build-requires",
            "trSynopsis": "[<dependency>...]",
            "trDescription": "This hook is invoked by commands that take care of updating build time dependencies – after doing so.\n\nThe arguments and available environment variables are the same as with the 'pull-build-requires' hook."
        },
        {
            "name": "post-package",
            "trSynopsis": "<package-file>...",
            "trDescription": "This hook is invoked whenever binary packages have been produced.\n\nAny <package-file> that has been produced is passed as an argument to this hook."
        },
        {
            "name": "pre-sign",
            "trSynopsis": "<package-file>...",
            "trDescription": "This hook is invoked whenever binary packages have been produced but prior to signing them.\n\nAny <package-file> that has been produced is passed as an argument to this hook."
        }
    ]
}
